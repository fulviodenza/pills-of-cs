// Code generated by ent, DO NOT EDIT.

package user

import (
	"entgo.io/ent/dialect/sql"
	"github.com/pills-of-cs/adapters/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.User {
	return predicate.User(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.User {
	return predicate.User(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldID, id))
}

// Schedule applies equality check predicate on the "schedule" field. It's identical to ScheduleEQ.
func Schedule(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldSchedule, v))
}

// CategoriesIsNil applies the IsNil predicate on the "categories" field.
func CategoriesIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldCategories))
}

// CategoriesNotNil applies the NotNil predicate on the "categories" field.
func CategoriesNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldCategories))
}

// ScheduleEQ applies the EQ predicate on the "schedule" field.
func ScheduleEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldSchedule, v))
}

// ScheduleNEQ applies the NEQ predicate on the "schedule" field.
func ScheduleNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldSchedule, v))
}

// ScheduleIn applies the In predicate on the "schedule" field.
func ScheduleIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldSchedule, vs...))
}

// ScheduleNotIn applies the NotIn predicate on the "schedule" field.
func ScheduleNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldSchedule, vs...))
}

// ScheduleGT applies the GT predicate on the "schedule" field.
func ScheduleGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldSchedule, v))
}

// ScheduleGTE applies the GTE predicate on the "schedule" field.
func ScheduleGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldSchedule, v))
}

// ScheduleLT applies the LT predicate on the "schedule" field.
func ScheduleLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldSchedule, v))
}

// ScheduleLTE applies the LTE predicate on the "schedule" field.
func ScheduleLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldSchedule, v))
}

// ScheduleContains applies the Contains predicate on the "schedule" field.
func ScheduleContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldSchedule, v))
}

// ScheduleHasPrefix applies the HasPrefix predicate on the "schedule" field.
func ScheduleHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldSchedule, v))
}

// ScheduleHasSuffix applies the HasSuffix predicate on the "schedule" field.
func ScheduleHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldSchedule, v))
}

// ScheduleEqualFold applies the EqualFold predicate on the "schedule" field.
func ScheduleEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldSchedule, v))
}

// ScheduleContainsFold applies the ContainsFold predicate on the "schedule" field.
func ScheduleContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldSchedule, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.User) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.User) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.User) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		p(s.Not())
	})
}
