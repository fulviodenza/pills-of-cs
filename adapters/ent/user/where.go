// Code generated by ent, DO NOT EDIT.

package user

import (
	"entgo.io/ent/dialect/sql"
	"github.com/pills-of-cs/adapters/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.User {
	return predicate.User(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.User {
	return predicate.User(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldID, id))
}

// PillSchedule applies equality check predicate on the "pill_schedule" field. It's identical to PillScheduleEQ.
func PillSchedule(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPillSchedule, v))
}

// NewsSchedule applies equality check predicate on the "news_schedule" field. It's identical to NewsScheduleEQ.
func NewsSchedule(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldNewsSchedule, v))
}

// CategoriesIsNil applies the IsNil predicate on the "categories" field.
func CategoriesIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldCategories))
}

// CategoriesNotNil applies the NotNil predicate on the "categories" field.
func CategoriesNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldCategories))
}

// PillScheduleEQ applies the EQ predicate on the "pill_schedule" field.
func PillScheduleEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPillSchedule, v))
}

// PillScheduleNEQ applies the NEQ predicate on the "pill_schedule" field.
func PillScheduleNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldPillSchedule, v))
}

// PillScheduleIn applies the In predicate on the "pill_schedule" field.
func PillScheduleIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldPillSchedule, vs...))
}

// PillScheduleNotIn applies the NotIn predicate on the "pill_schedule" field.
func PillScheduleNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldPillSchedule, vs...))
}

// PillScheduleGT applies the GT predicate on the "pill_schedule" field.
func PillScheduleGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldPillSchedule, v))
}

// PillScheduleGTE applies the GTE predicate on the "pill_schedule" field.
func PillScheduleGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldPillSchedule, v))
}

// PillScheduleLT applies the LT predicate on the "pill_schedule" field.
func PillScheduleLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldPillSchedule, v))
}

// PillScheduleLTE applies the LTE predicate on the "pill_schedule" field.
func PillScheduleLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldPillSchedule, v))
}

// PillScheduleContains applies the Contains predicate on the "pill_schedule" field.
func PillScheduleContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldPillSchedule, v))
}

// PillScheduleHasPrefix applies the HasPrefix predicate on the "pill_schedule" field.
func PillScheduleHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldPillSchedule, v))
}

// PillScheduleHasSuffix applies the HasSuffix predicate on the "pill_schedule" field.
func PillScheduleHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldPillSchedule, v))
}

// PillScheduleEqualFold applies the EqualFold predicate on the "pill_schedule" field.
func PillScheduleEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldPillSchedule, v))
}

// PillScheduleContainsFold applies the ContainsFold predicate on the "pill_schedule" field.
func PillScheduleContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldPillSchedule, v))
}

// NewsScheduleEQ applies the EQ predicate on the "news_schedule" field.
func NewsScheduleEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldNewsSchedule, v))
}

// NewsScheduleNEQ applies the NEQ predicate on the "news_schedule" field.
func NewsScheduleNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldNewsSchedule, v))
}

// NewsScheduleIn applies the In predicate on the "news_schedule" field.
func NewsScheduleIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldNewsSchedule, vs...))
}

// NewsScheduleNotIn applies the NotIn predicate on the "news_schedule" field.
func NewsScheduleNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldNewsSchedule, vs...))
}

// NewsScheduleGT applies the GT predicate on the "news_schedule" field.
func NewsScheduleGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldNewsSchedule, v))
}

// NewsScheduleGTE applies the GTE predicate on the "news_schedule" field.
func NewsScheduleGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldNewsSchedule, v))
}

// NewsScheduleLT applies the LT predicate on the "news_schedule" field.
func NewsScheduleLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldNewsSchedule, v))
}

// NewsScheduleLTE applies the LTE predicate on the "news_schedule" field.
func NewsScheduleLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldNewsSchedule, v))
}

// NewsScheduleContains applies the Contains predicate on the "news_schedule" field.
func NewsScheduleContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldNewsSchedule, v))
}

// NewsScheduleHasPrefix applies the HasPrefix predicate on the "news_schedule" field.
func NewsScheduleHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldNewsSchedule, v))
}

// NewsScheduleHasSuffix applies the HasSuffix predicate on the "news_schedule" field.
func NewsScheduleHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldNewsSchedule, v))
}

// NewsScheduleEqualFold applies the EqualFold predicate on the "news_schedule" field.
func NewsScheduleEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldNewsSchedule, v))
}

// NewsScheduleContainsFold applies the ContainsFold predicate on the "news_schedule" field.
func NewsScheduleContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldNewsSchedule, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.User) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.User) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.User) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		p(s.Not())
	})
}
